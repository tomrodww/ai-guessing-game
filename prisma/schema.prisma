// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Theme {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String // Tailwind color class
  icon        String // Lucide icon name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stories Story[]

  @@map("themes")
}

model Story {
  id         String     @id @default(cuid())
  title      String
  context    String // The hint/context that sets up the mystery
  fullText   String // The complete solution text
  hints      String[] // Array of 3 hints for the story
  difficulty Difficulty
  themeId    String
  imageUrl   String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  theme              Theme               @relation(fields: [themeId], references: [id], onDelete: Cascade)
  phrases            StoryPhrase[] // The phrases that make up the complete story
  playerAffirmations PlayerAffirmation[]

  @@map("stories")
}

model StoryPhrase {
  id        String   @id @default(cuid())
  storyId   String
  order     Int // Order of the phrase in the story (1, 2, 3, etc.)
  text      String // The exact phrase text
  createdAt DateTime @default(now())

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, order])
  @@map("story_phrases")
}

model PlayerAffirmation {
  id          String   @id @default(cuid())
  storyId     String
  affirmation String // The affirmation/statement made by the player
  response    String // "Yes", "No", or "Irrelevant"
  phraseId    String? // If response is "Yes", which phrase does this relate to
  isUsed      Boolean  @default(false) // True when the related phrase is fully discovered
  createdAt   DateTime @default(now())

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("player_affirmations")
}

enum Difficulty {
  SHORT // 3 phrases
  MEDIUM // 5 phrases
  LONG // 7 phrases
}
